{"version":3,"sources":["components/login/login.tsx","components/header/header.tsx","components/profile-pic/profile-pic.tsx","components/speaker/speaker.tsx","components/event-badge/event-badge.tsx","components/url-button/url-button.tsx","components/event-card/event-card.tsx","models/event/event.model.ts","models/api/api.ts","models/event/event.api.ts","components/filter/filter.tsx","components/event-list/event-list.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SModalHeader","styled","Modal","Header","SLoginWrapper","div","SLoginHeader","SGearFill","GearFill","SLoginTitle","SButton","Button","SLoginError","Login","props","show","onHide","authenticate","useState","email","setEmail","password","setPassword","passwordVisible","setPasswordVisible","incorrect","setIncorrect","centered","closeButton","Row","noGutters","Col","xs","size","Form","onSubmit","e","preventDefault","Group","Control","type","placeholder","value","onChange","currentTarget","InputGroup","Append","Text","onClick","disabled","SGear","Gear","SNavLink","Nav","Link","name","authenticated","logout","setShow","Navbar","bg","variant","sticky","Brand","className","SImage","Image","SPersonCircle","PersonCircle","ProfilePic","profile_pic","src","roundedCircle","SName","span","Speaker","speaker","SBadge","Badge","EventBadge","eventType","pill","workshop","activity","tech_talk","split","map","word","toUpperCase","substring","join","SLink45deg","Link45deg","UrlButton","url","site","search","window","open","SCardWrap","SCol","SEventBadgeWrap","SUrlButtonWrap","SCardBody","Card","Body","SSpeakerWrap","EventCard","event","setRelatedEvents","startDate","DateTime","fromMillis","start_time","endDate","end_time","date","toLocaleString","TIME_SIMPLE","toFormat","Title","event_type","Subtitle","md","sm","public_url","private_url","description","speakers","length","related_events","Footer","s","EventType","Event","data","id","permission","this","set","Api","path","axios","get","config","API_URL","timeout","API_REQUEST_TIMEOUT","resp","Object","keys","Error","EventApi","events","d","SFilterWrap","SFilterLabel","button","Filter","filter","eventTypes","relatedEvents","setEventTypes","includes","SEventListWrap","SEventCardWrap","SNoResults","h2","EventList","setEvents","setFilter","useEffect","then","res","sort","a","b","filteredEvents","et","concat","App","setAuthenticated","USER_FIRSTNAME","USER_EMAIL","USER_PASSWORD","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3eb5f45d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport Modal from \"react-bootstrap/Modal\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { GearFill, Eye, EyeSlash } from \"react-bootstrap-icons\";\nimport styled from \"styled-components\";\n\ninterface PLogin {\n  show: boolean;\n  onHide: () => void;\n  authenticate: (email: string, password: string) => boolean;\n}\n\nconst SModalHeader = styled(Modal.Header)`\n  border-bottom: 0;\n`;\n\nconst SLoginWrapper = styled.div`\n  width: 384px;\n  height: 384px;\n  margin: auto;\n  padding: 0 16px;\n  text-align: center;\n`;\n\nconst SLoginHeader = styled.div`\n  margin: 16px 0;\n`;\n\nconst SGearFill = styled(GearFill)`\n  margin: 10px;\n  float: right;\n  width: 32px;\n`;\n\nconst SLoginTitle = styled.div`\n  text-align: left;\n  font-size: 21px;\n  margin-top: 8px;\n`;\n\nconst SButton = styled(Button)`\n  background-color: rgb(55, 63, 87);\n  color: white;\n  width: 256px;\n  font-size: 16px;\n  border-radius: 48px;\n  margin: 16px 0;\n  padding: 16px;\n  border: none;\n\n  &:hover {\n    background-color: rgb(55, 63, 87);\n    opacity: 0.8;\n  }\n\n  &:disabled {\n    background-color: rgb(55, 63, 87);\n    opacity: 0.5 !important;\n  }\n\n  &:focus {\n    background-color: rgb(55, 63, 87);\n  }\n`;\n\nconst SLoginError = styled.div`\n  margin: 8px;\n  font-size: 12px;\n  color: red;\n`;\n\n/**\n * Login component\n * - provides form for user to log in\n *\n * @param props - Login props\n * @returns the Login component\n */\nconst Login = (props: PLogin): React.ReactElement => {\n  const { show, onHide, authenticate } = props;\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const [incorrect, setIncorrect] = useState(false);\n\n  const validateLogin = (e: React.FormEvent): void => {\n    e.preventDefault();\n    if (authenticate(email, password)) {\n      onHide();\n    } else {\n      setIncorrect(true);\n    }\n  };\n\n  return (\n    <Modal show={show} onHide={onHide} centered>\n      <SModalHeader closeButton />\n      <SLoginWrapper>\n        <SLoginHeader>\n          <Row noGutters>\n            <Col xs={4}>\n              <SGearFill size={24} />\n            </Col>\n            <Col>\n              <SLoginTitle>Let's Get Hacking</SLoginTitle>\n            </Col>\n          </Row>\n        </SLoginHeader>\n        <Form onSubmit={validateLogin}>\n          <Form.Group>\n            <Form.Control\n              type=\"email\"\n              placeholder=\"Email\"\n              value={email}\n              onChange={(e) => {\n                setEmail(e.currentTarget.value);\n                if (incorrect) setIncorrect(false);\n              }}\n            />\n          </Form.Group>\n          <Form.Group>\n            <InputGroup>\n              <Form.Control\n                type={passwordVisible ? \"text\" : \"password\"}\n                placeholder=\"Password\"\n                value={password}\n                onChange={(e) => {\n                  setPassword(e.currentTarget.value);\n                  if (incorrect) setIncorrect(false);\n                }}\n              />\n              <InputGroup.Append>\n                <InputGroup.Text\n                  onClick={() => {\n                    setPasswordVisible(!passwordVisible);\n                  }}\n                >\n                  {passwordVisible ? <Eye /> : <EyeSlash />}\n                </InputGroup.Text>\n              </InputGroup.Append>\n            </InputGroup>\n          </Form.Group>\n          <SButton type=\"submit\" disabled={!email || !password}>\n            Log in\n          </SButton>\n          {incorrect && <SLoginError>Incorrect email or password</SLoginError>}\n        </Form>\n      </SLoginWrapper>\n    </Modal>\n  );\n};\n\nexport default Login;\n","import React, { useState } from \"react\";\n\nimport Navbar from \"react-bootstrap/navbar\";\nimport Nav from \"react-bootstrap/nav\";\nimport { Gear } from \"react-bootstrap-icons\";\nimport styled from \"styled-components\";\n\nimport Login from \"components/login/login\";\n\ninterface PHeader {\n  name?: string;\n  authenticated: boolean;\n  authenticate: (email: string, password: string) => boolean;\n  logout: () => void;\n}\n\nconst SGear = styled(Gear)`\n  margin-bottom: 8px;\n`;\n\nconst SNavLink = styled(Nav.Link)`\n  color: white;\n\n  &:hover {\n    color: white;\n    opacity: 0.5;\n  }\n`;\n\n/**\n * Header component\n * - contains site name and log in button\n *\n * @param props - Header props\n * @returns the Header component\n */\nconst Header = (props: PHeader): React.ReactElement => {\n  const { name, authenticated, authenticate, logout } = props;\n  const [show, setShow] = useState(false);\n\n  const onHide = () => {\n    setShow(false);\n  };\n\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\">\n        <Navbar.Brand>\n          <SGear /> Hack the North\n        </Navbar.Brand>\n        <Nav className=\"mr-auto\" />\n        {authenticated ? (\n          <>\n            <Navbar.Text className=\"d-none d-sm-block\">\n              Welcome {name || \"\"}\n            </Navbar.Text>\n            <SNavLink onClick={logout}>Log out</SNavLink>\n          </>\n        ) : (\n          <SNavLink\n            onClick={() => {\n              setShow(true);\n            }}\n          >\n            Log in\n          </SNavLink>\n        )}\n      </Navbar>\n      {show && (\n        <Login show={show} onHide={onHide} authenticate={authenticate} />\n      )}\n    </>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nimport Image from \"react-bootstrap/Image\";\nimport { PersonCircle } from \"react-bootstrap-icons\";\nimport styled from \"styled-components\";\n\ninterface PProfilePic {\n  profile_pic?: string;\n}\n\nconst SImage = styled(Image)`\n  width: 32px;\n  padding-bottom: 4px;\n`;\n\nconst SPersonCircle = styled(PersonCircle)`\n  width: 32px;\n  height: 32px;\n  padding-bottom: 4px;\n`;\n\n/**\n * Profile picture component\n * - photo icon for a speaker\n *\n * @param props - ProfilePic props\n * @returns the ProfilePic component\n */\nconst ProfilePic = (props: PProfilePic): React.ReactElement => {\n  const { profile_pic } = props;\n\n  if (profile_pic) return <SImage src={profile_pic} roundedCircle />;\n  return <SPersonCircle />;\n};\n\nexport default ProfilePic;\n","import React from \"react\";\n\nimport styled from \"styled-components\";\n\nimport ProfilePic from \"components/profile-pic/profile-pic\";\nimport { TSpeaker } from \"models/event\";\n\nexport interface PSpeaker {\n  speaker: TSpeaker;\n}\n\nconst SName = styled.span`\n  margin-left: 10px;\n`;\n\n/**\n * Speaker component\n * - displays a speaker's name and image\n *\n * @param props - Speaker props\n * @returns the Speaker component\n */\nconst Speaker = (props: PSpeaker): React.ReactElement => {\n  const { speaker } = props;\n\n  return (\n    <>\n      <ProfilePic profile_pic={speaker.profile_pic} />\n      <SName>{speaker.name}</SName>\n    </>\n  );\n};\n\nexport default Speaker;\n","import React from \"react\";\n\nimport Badge from \"react-bootstrap/Badge\";\nimport styled from \"styled-components\";\n\nimport { TEventType } from \"models/event\";\n\ninterface PEventBadge {\n  eventType: TEventType;\n  onClick?: (eventType: TEventType) => void;\n}\n\nconst SBadge = styled(Badge)`\n  width: 80px;\n  font-size: 12px;\n  cursor: ${(props) => (props.onClick ? \"pointer\" : \"initial\")};\n  user-select: none;\n`;\n\n/**\n * Event badge component\n * - acts as a tag for EventType\n *\n * @param props - EventBadge props\n * @returns the EventBadge component\n */\nconst EventBadge = (props: PEventBadge): React.ReactElement => {\n  const { eventType, onClick } = props;\n\n  const colors = {\n    workshop: \"warning\",\n    activity: \"info\",\n    tech_talk: \"secondary\",\n  };\n\n  return (\n    <SBadge\n      pill\n      variant={colors[eventType]}\n      onClick={() => {\n        if (onClick) onClick(eventType);\n      }}\n    >\n      {eventType\n        .split(\"_\")\n        .map((word) => word[0].toUpperCase() + word.substring(1))\n        .join(\" \")}\n    </SBadge>\n  );\n};\n\nexport default EventBadge;\n","import React from \"react\";\n\nimport Button from \"react-bootstrap/Button\";\nimport { Link45deg } from \"react-bootstrap-icons\";\nimport styled from \"styled-components\";\n\nexport interface PUrlButton {\n  url: string;\n}\n\nconst SButton = styled(Button)`\n  width: 128px;\n  border-radius: 8px;\n  margin: 0 8px;\n`;\n\nconst SLink45deg = styled(Link45deg)`\n  margin: 0 4px;\n  padding-bottom: 2px;\n`;\n\n/**\n * URL button component\n * - button to display event url\n *\n * @param props - UrlButton props\n * @returns the UrlButton component\n */\nconst UrlButton = (props: PUrlButton): React.ReactElement => {\n  const { url } = props;\n\n  let site = \"\";\n  if (url.search(\"hopin\") !== -1) site = \"Hopin\";\n  if (url.search(\"youtu.be\") !== -1) site = \"YouTube\";\n\n  return (\n    <SButton\n      variant={site === \"YouTube\" ? \"outline-danger\" : \"outline-primary\"}\n      size=\"sm\"\n      onClick={() => {\n        window.open(url, \"_blank\");\n      }}\n    >\n      {site}\n      <SLink45deg size={16} />\n    </SButton>\n  );\n};\n\nexport default UrlButton;\n","import React from \"react\";\n\nimport Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport styled from \"styled-components\";\nimport { DateTime } from \"luxon\";\n\nimport Speaker from \"components/speaker/speaker\";\nimport EventBadge from \"components/event-badge/event-badge\";\nimport UrlButton from \"components/url-button/url-button\";\nimport { Event } from \"models/event\";\n\nexport interface PEventCard {\n  event: Event;\n  authenticated: boolean;\n  setRelatedEvents: (event?: Event) => void;\n}\n\nconst SCardWrap = styled.div`\n  padding: 16px;\n  padding-bottom: 0;\n`;\n\nconst SCol = styled(Col)`\n  margin-bottom: 16px;\n`;\n\nconst SEventBadgeWrap = styled.span`\n  margin: 0 8px;\n  vertical-align: text-top;\n`;\n\nconst SUrlButtonWrap = styled.span`\n  display: flex;\n  justify-content: center;\n`;\n\nconst SCardBody = styled(Card.Body)`\n  padding-top: 0;\n`;\n\nconst SSpeakerWrap = styled.span`\n  margin: 0 8px;\n`;\n\n/**\n * Event card component\n * - displays information for one event\n *\n * @param props - EventCard props\n * @returns the EventCard component\n */\nconst EventCard = (props: PEventCard): React.ReactElement => {\n  const { event, authenticated, setRelatedEvents } = props;\n\n  const startDate = DateTime.fromMillis(event.start_time);\n  const endDate = DateTime.fromMillis(event.end_time);\n  const date = `${startDate.toLocaleString(\n    DateTime.TIME_SIMPLE\n  )} to ${endDate.toLocaleString(DateTime.TIME_SIMPLE)} on ${endDate.toFormat(\n    \"cccc, LLLL d, yyyy\"\n  )}`;\n\n  return (\n    <Card>\n      <SCardWrap>\n        <Row>\n          <SCol>\n            <Card.Title>\n              {event.name}\n              <SEventBadgeWrap>\n                <EventBadge eventType={event.event_type} />\n              </SEventBadgeWrap>\n            </Card.Title>\n            <Card.Subtitle className=\"text-muted\">{date}</Card.Subtitle>\n          </SCol>\n          <SCol md=\"auto\" sm={12}>\n            <SUrlButtonWrap>\n              {event.public_url && <UrlButton url={event.public_url} />}\n              {authenticated && event.private_url && (\n                <UrlButton url={event.private_url} />\n              )}\n            </SUrlButtonWrap>\n          </SCol>\n        </Row>\n        <SCardBody>{event.description}</SCardBody>\n      </SCardWrap>\n      {event.speakers.length + event.related_events.length > 0 && (\n        <Card.Footer>\n          <Row>\n            <Col>\n              {event.speakers.length > 0 && (\n                <>\n                  Speaker{event.speakers.length > 1 ? \"s\" : \"\"}:{\" \"}\n                  {event.speakers.map((s) => (\n                    <SSpeakerWrap>\n                      <Speaker speaker={s} />\n                    </SSpeakerWrap>\n                  ))}\n                </>\n              )}\n            </Col>\n            <Col sm=\"auto\" xs={12}>\n              {event.related_events.length > 0 && (\n                <Button\n                  variant=\"link\"\n                  onClick={() => {\n                    setRelatedEvents(event);\n                  }}\n                >\n                  Related Events\n                </Button>\n              )}\n            </Col>\n          </Row>\n        </Card.Footer>\n      )}\n    </Card>\n  );\n};\n\nexport default EventCard;\n","export const EventType = [\"workshop\", \"activity\", \"tech_talk\"] as const;\nexport type TEventType = typeof EventType[number];\n\nexport const Permission = [\"public\", \"private\"] as const;\nexport type TPermission = typeof Permission[number];\n\nexport type TSpeaker = {\n  name: string;\n  profile_pic?: string; // a url to an image\n};\n\nexport type TEvent = {\n  id: number;\n  name: string;\n  event_type: TEventType;\n  permission?: TPermission;\n\n  start_time: number; // unix timestamp (ms)\n  end_time: number; // unix timestamp (ms)\n\n  description?: string; // a paragraph describing the event\n  speakers: TSpeaker[]; // a list of speakers for the event\n\n  public_url?: string; // a url to display for the general public\n  private_url: string; // a url to display for hackers\n  related_events: number[]; // a list ids corresponding to related events\n};\n\n/**\n * Representation of an event\n */\nexport class Event implements TEvent {\n  id = 0;\n  name = \"\";\n  event_type: TEventType = \"workshop\";\n  permission?: TPermission;\n  start_time = 0;\n  end_time = 0;\n  description?: string;\n  speakers: TSpeaker[] = [];\n  public_url?: string;\n  private_url = \"\";\n  related_events: number[] = [];\n\n  /**\n   * Constructor\n   *\n   * @param data - the constructor data\n   */\n  constructor(data: TEvent) {\n    this.set(data);\n  }\n\n  /**\n   * Sets given data to the object\n   *\n   * @param data - the data to set\n   */\n  set(data: Partial<TEvent>): void {\n    if (data.id) this.id = data.id;\n    if (data.name) this.name = data.name;\n    if (data.event_type) this.event_type = data.event_type;\n    if (data.permission) this.permission = data.permission;\n    if (data.start_time) this.start_time = data.start_time;\n    if (data.end_time) this.end_time = data.end_time;\n    if (data.description) this.description = data.description;\n    if (data.speakers) this.speakers = data.speakers;\n    if (data.public_url) this.public_url = data.public_url;\n    if (data.private_url) this.private_url = data.private_url;\n    if (data.related_events) this.related_events = data.related_events;\n  }\n}\n","import axios from \"axios\";\nimport config from \"library/config.json\";\n\n/**\n * Wraps the API communication\n */\nexport const Api = {\n  /**\n   * Make a get request\n   *\n   * @param path - the path to request\n   * @returns The API response\n   */\n  async get<T = unknown>(path: string): Promise<T> {\n    try {\n      const resp = await axios.get<{ data: { [key: string]: T } }>(\n        config.API_URL + path,\n        { timeout: config.API_REQUEST_TIMEOUT }\n      );\n      return resp.data.data[Object.keys(resp.data.data)[0]];\n    } catch (error) {\n      // connection timeout\n      throw new Error(\"API error.\");\n    }\n  },\n};\n","import { Api } from \"models/api\";\nimport { Event, TEvent } from \".\";\n\nconst BASE_URL =\n  \"graphql?query={ events { id name event_type permission start_time end_time description speakers { name profile_pic } public_url private_url related_events } }\";\n\nexport const EventApi = {\n  /**\n   * Gets all events\n   *\n   * @returns list of events\n   */\n  async getAll(): Promise<Event[]> {\n    const data = await Api.get<TEvent[]>(BASE_URL);\n    const events = data.map((d) => new Event(d));\n    return events;\n  },\n};\n","import React from \"react\";\n\nimport Badge from \"react-bootstrap/Badge\";\nimport styled from \"styled-components\";\n\nimport EventBadge from \"components/event-badge/event-badge\";\nimport { Event, EventType, TEventType } from \"models/event\";\n\ninterface PFilter {\n  filter: {\n    eventTypes: TEventType[];\n    relatedEvents?: Event;\n  };\n  setEventTypes: (eventType: TEventType) => void;\n  setRelatedEvents: (event?: Event) => void;\n}\n\nconst SFilterWrap = styled.div`\n  padding: 0 16px;\n  overflow: auto;\n`;\n\nconst SFilterLabel = styled.span`\n  font-size: 14px;\n`;\n\nconst SEventBadgeWrap = styled.span`\n  margin-right: 8px;\n  opacity: ${(props: { disabled: boolean }) => (props.disabled ? \"0.5\" : \"1\")};\n`;\n\nconst SButton = styled.button`\n  color: white;\n  background-color: Transparent;\n  border: none;\n`;\n\n/**\n * Filter component\n * - displays a list of filters\n *\n * @param props - Filter props\n * @returns the Filter component\n */\nconst Filter = (props: PFilter): React.ReactElement => {\n  const {\n    filter: { eventTypes, relatedEvents },\n    setEventTypes,\n    setRelatedEvents,\n  } = props;\n  return (\n    <SFilterWrap>\n      <SFilterLabel>FILTERS: </SFilterLabel>\n      {EventType.map((eventType) => (\n        <SEventBadgeWrap disabled={!eventTypes.includes(eventType)}>\n          <EventBadge eventType={eventType} onClick={setEventTypes} />\n        </SEventBadgeWrap>\n      ))}\n      {relatedEvents && (\n        <Badge variant=\"dark\">\n          Events related to <i>{relatedEvents.name}</i>\n          <SButton\n            onClick={() => {\n              setRelatedEvents();\n            }}\n          >\n            <span>&times;</span>\n          </SButton>\n        </Badge>\n      )}\n    </SFilterWrap>\n  );\n};\n\nexport default Filter;\n","import React, { useState, useEffect } from \"react\";\n\nimport styled from \"styled-components\";\n\nimport EventCard from \"components/event-card/event-card\";\nimport Filter from \"components/filter/filter\";\nimport { Event, EventApi, EventType, TEventType } from \"models/event\";\n\nexport interface PEventList {\n  authenticated: boolean;\n}\n\nconst SEventListWrap = styled.div`\n  margin: 32px auto;\n  max-width: 1024px;\n`;\n\nconst SFilterWrap = styled.div`\n  padding: 8px 16px;\n`;\n\nconst SEventCardWrap = styled.div`\n  padding: 8px 16px;\n`;\n\nconst SNoResults = styled.h2`\n  padding: 32px;\n  opacity: 0.75;\n`;\n\n/**\n * Event list component\n * - displays all events (based on filter)\n *\n * @param props - EventList props\n * @returns the EventList component\n */\nconst EventList = (props: PEventList): React.ReactElement => {\n  const { authenticated } = props;\n  const [events, setEvents] = useState<Event[]>();\n  const [filter, setFilter] = useState<{\n    eventTypes: TEventType[];\n    relatedEvents?: Event;\n  }>({\n    eventTypes: [...EventType],\n  });\n\n  useEffect(() => {\n    EventApi.getAll().then((res: Event[]) => {\n      setEvents(\n        res.sort((a: Event, b: Event) =>\n          a.start_time === b.start_time\n            ? 0\n            : a.start_time < b.start_time\n            ? -1\n            : 1\n        )\n      );\n    });\n  }, []);\n\n  const setEventTypes = (eventType: TEventType) => {\n    setFilter({\n      ...filter,\n      eventTypes: filter.eventTypes.includes(eventType)\n        ? filter.eventTypes.filter((et) => et !== eventType)\n        : filter.eventTypes.concat(eventType),\n    });\n  };\n\n  const setRelatedEvents = (event?: Event) => {\n    setFilter({ ...filter, relatedEvents: event });\n  };\n\n  const filteredEvents = events?.filter(\n    (event) =>\n      (authenticated || event.permission === \"public\") &&\n      filter.eventTypes.includes(event.event_type) &&\n      (!filter.relatedEvents ||\n        filter.relatedEvents.related_events.includes(event.id))\n  );\n\n  return (\n    <SEventListWrap>\n      <SFilterWrap>\n        <Filter\n          filter={filter}\n          setEventTypes={setEventTypes}\n          setRelatedEvents={setRelatedEvents}\n        />\n      </SFilterWrap>\n      {filteredEvents && filteredEvents.length > 0 ? (\n        filteredEvents.map((event) => (\n          <SEventCardWrap>\n            <EventCard\n              event={event}\n              authenticated={authenticated}\n              setRelatedEvents={setRelatedEvents}\n            />\n          </SEventCardWrap>\n        ))\n      ) : (\n        <SNoResults>No Events Found :(</SNoResults>\n      )}\n    </SEventListWrap>\n  );\n};\n\nexport default EventList;\n","import React, { useState } from \"react\";\n\nimport Header from \"components/header/header\";\nimport EventList from \"components/event-list/event-list\";\nimport config from \"library/config.json\";\n\nconst App = (): React.ReactElement => {\n  const [authenticated, setAuthenticated] = useState(false);\n\n  const authenticate = (email: string, password: string) => {\n    if (email === config.USER_EMAIL && password === config.USER_PASSWORD) {\n      setAuthenticated(true);\n      return true;\n    }\n    return false;\n  };\n\n  const logout = () => {\n    setAuthenticated(false);\n  };\n\n  return (\n    <>\n      <Header\n        name={authenticated ? config.USER_FIRSTNAME : \"\"}\n        authenticated={authenticated}\n        authenticate={authenticate}\n        logout={logout}\n      />\n      <EventList authenticated={authenticated} />\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}